********************* OBS.: *********************
ConfigMaps e secrets:
 - para usar a mesma imagem em aplicações e serviços, ou seja, não ficar recriando imagem a cada atualização.

ConfigMaps:
 - usados para fornecer informações (específicas ou grupo de informações) na forma de um arquivo para configuração das cargas de trabalho;
 - conjunto de cahve e valor armazenados em um objeto

secrets:
 - parecido com ConfigMaps, porém com foco em deixar informações sigilosas (credenciais ou certificados TLS) disponíveis à carga de trabalho.
 - combinado com o Pod imediatamente antes da execução desse Pod;
 - objeto Kubernetes que define um sistema de arquivos (conjunto de variáveis para definir o ambiente ou linha de comando)
*************************************************

--------------------------------------------------
Exemplo: Disponibilizar um arquivo em disco (my-config.txt) ao Pod.
Criar um ConfigMap a partir de my-config.txt
--------------------------------------------------
kubectl create configmap my-config --from-file=my-config --from-literal=extra-param=extra-value --from-literal=another-param=another-value

--------------------------------------------------
Obter YAML equivalente ao objeto ConfigMap criado
--------------------------------------------------
kubectl get configmaps my-config -o yaml


********************* OBS.: *********************
Usando ConfigMaps. Há três maneiras:
 - sistema de arquivo: montar ConfigMap em um Pod, um arquivo será criado para cada entrada de acordo com o nome da chave, o conteúdo será o valor;
 - variável de ambiente: ConfigMap pode ser usado para definir dinamicamente o valor de uma variável de ambiente;
 - argumento de linha de comando: Kubernetes cria dinamicamente a linha de comando para um contêiner com base nos valores que estão no ConfigMap;
 - é criado arquivos ocultos usados para fazer troca (swap) organizada por novos valores quando o ConfigMap for atualizado.
*************************************************
kubectl apply -f kuard-config.yaml
kubectl port-forward kuard-config 8080

********************* OBS.: *********************
Secrets:
 - usado em dados sigilosos (secrets) como senhas, tokens de segurança ou outros tipos de chaves privadas;
 - permitem que imagem de contêiners sejam geradas, sem que dados sigilosos sejam incluídos, podendo ser portáveis entre diferentes ambientes;
 - usam de verificação das primitivas nativas de isoladmento do sistema operacional;
 - armazenam um ou mais elemento de dados na forma de um conjunto de pares chave/valor;


Criar perfil de segurança apropriado:
 - por padrão, os secretes do Kubernetes são armazenados em formato texto simples na área de armazenagem "etc" do cluster;
 - qualquer pessoa que tenha direito de administração no cluster poderá ler todos secrets do cluster;
 - existe suporte para critografar os secrets com uma chave fornecida pelo usuário, em geral integrado a um sistema de armazenagem de chave na nuvem;
 - existe como substituir o gerenciamento do secrets do Kubernetes pelo gerenciamento do provedor de nuvem; 
*************************************************


--------------------------------------------------
Criar uma chave e um certificado TLS para a aplicação "kuard", sem esses certificados "kuard" pode ser portável para diferentes ambientes
Baixar chave e certificado TLS (OBS.: Esses certificados são compartilhados pelo mundo e não oferecem proteção)
--------------------------------------------------
curl -o kuard.crt https://storage.googleapis.com/kuar-demo/kuard.crt
curl -o kuard.key https://storage.googleapis.com/kuar-demo/kuard.key

--------------------------------------------------
Criar um secret
--------------------------------------------------
kubectl create secret generic kuard-tls --from-file=kuard.crt --from-file=kuard.key
kubectl describe secrets kuard-tls

********************* OBS.: *********************
Consumindo secrets:
 - podem ser consumidos por meio de API REST;
 - podem ser consumidos por aplicações que saibam como chamar essa API diretamente;
 - para manter as aplicações portáveis, o ideal é usar um "volume de secrets" em vez de acessar os secrets por meio do servidor API;


Volume de secrets:
 - por meio dele dados de secrets são expostos aos Pods;
 - são gerenciados pelo kubelet e criados durante a criação do Pod;
 - são armazenados em volumes "tmpfs" (discos RAM) e não são gravados em disco nos nós;
 - cada elemento de um secret é armazenado em um arquivo separado no ponto de montagem alvo especificado na montagem do volume;
*************************************************

--------------------------------------------------
Criar um pod e conectar-se com ele
--------------------------------------------------
kubectl apply -f kuard-secret.yaml
kubectl port-forward kuard-tls 8443:8443

********************* OBS.: *********************
Registro privados do Docker:
 - caso especial para secrets é armazenar credenciais de acesso para registros privados do Docker;
 - Kubernetes aceita imagens armazenadas em registro privado, mas o acesso a essas imagens utiliza crediciais;
 - "secrets para obtenção de imagem (image pull request)" tiram proveito da API de secrets para automatizar a distribuição de registros privados;
 - são armazenados do mesmo modo que os secrets comuns, porém são acessados através do campo "spec.imagePullSecrets" da espeificação de um Pod;
 - pode-se adicionar os secrets na conta de serviço default associada a cada Pod a fim de evitar ter de especificar os secrets em cada Pod.
*************************************************

********************* OBS.: *********************
Restrição quanto à nomenclatura dos secrets e ConfigMap:
 - devem obedecer a expressão ergular ^[.[?[a-zAZ0-9[([.[?[a-zA-Z-9[+[-_a-zA-Z0-9[?(*$   ;
 - nomes válidos: ".auth_token", "Key.pem", "config_file" 
 - nomes inválidos: "Token..properties", "auth file.json", "_password.txt" 

Tamanho dos dos secrets e ConfigMap são de 1M
Secrets e ConfigMap fazem codificação bas64, portanto armazenam dados binários, mas se torna mais complexo a alocação desses dados no arquivo YAML;
*************************************************


--------------------------------------------------
Listar ConfigMaps e secrets
--------------------------------------------------
kubectl get secrets
kubectl get configmap

--------------------------------------------------
Listar um único objeto ConfigMap, por exemplo
--------------------------------------------------
kubectl get configmap my-config

--------------------------------------------------
Obter dados brutos de um único objeto ConfigMap ou secret, por exemplo
--------------------------------------------------
kubectl get configmap my-config -o yaml
kubectl get secret kuard-tls -o yaml


--------------------------------------------------
Criar objetos ConfigMap ou secret, alguns parâmetros são:
 - "from-file=<nome-do-arquivo>": carrega os dados do arquivo com chave e valor iguais;
 - "from-file=<chave>=<nome-do-arquivo>": carrega os dados do arquivo com chave e valor diferentes;
 - "from-file=<diretório>": carega todos arquivos do diretório especificado;
 - "from-file=<chave>=<valor": utiliza diretamente par chave/valor especificado;
--------------------------------------------------
kubectl create configmap 
kubectl create secret generic

--------------------------------------------------
Atualizar objetos ConfigMap ou secret:
 - não há necessidade de reiniciar a aplicação se ela estiver configurada para reler os valores de configuração;
 - existem três maneiras: 
    1) atualizar a partir de um arquivo;
    2) recriar e atualizar;
    3) editar a versão atual;

Atualizar a partir de um arquivo:
 - NÃO RECOMENDADO, fazer check-in de arquivos YAML de secrets no sistema de controle pode faciltar a pessoa realizar um "push" desses arquivos para um local público; 
 - usando o manifesto para o ConfigMap ou secret, poderá editá-lo diretamente e enviar uma nova versão; 
 - caso mais comum é quando ConfigMap é definido como parte de um diretório ou lista de recursos, tudo é criado e analisado em conjunto.
--------------------------------------------------
kubectl replace -f <nome-do-arquivo>
kubectl apply -f <nome-do-arquivo>

--------------------------------------------------
Recriar e atualizar:
 - caso esteja armazenado as entradas no ConfigMaps ou secrets como arquivos separados em disco (em oposição a incluí-las diretamente no YAML); 
 - possível recriar o manifesto e utilizar para atualizar o objeto;
 - não envia o arquivo YAML diretamente, mas sim faz uma espécie de "dump" do YAML em "stdout", realiza um pipe (|) da informação para alimentar "stdin" e a flag "-f" é usada para realizar a leitura.  
 - permite ao servidor atualizar secret a partir de arquivo em disco sem ter que codificar manualmente os dados com base64. 
--------------------------------------------------
kubectl create secret generic kuard-tls --from-file=kuard.crt --from-file=kuard.key --dry-run -o yaml | kubectl replace -f -

--------------------------------------------------
Editar a versão atual:
 - carregar uma versão do ConfigMap em seu editor para alterá-la (seria possível fazer com um secret, mas a codificação dos valores em base64 devem ser gerenciados por conta própria);
--------------------------------------------------
kubectl edit configmap my-config

--------------------------------------------------
Atualização ao vivo:
 - depois de subir o secret ou ConfigMap ele será autmaticamente distribuído pelo cluster, não é necessário reiniciá-lo;
--------------------------------------------------